---
title: "Preoperative Atelectasis"
subtitle: "Part 8: Statistical Modelling of SpO2 (without removing outliers)"
author: "Javier Mancilla Galindo"
date: "`r Sys.Date()`"
execute: 
  echo: false
  warning: false
toc: true
toc_float: true
format:
  html:
    embed-resources: true
  pdf:
    documentclass: scrartcl
editor: visual
---

# Setup

#### Packages used

```{r}
#| echo: true
if (!require("pacman", quietly = TRUE)) {
  install.packages("pacman")
}


pacman::p_load(
  tidyverse, # Used for basic data handling and visualization.
  RColorBrewer, #Color palettes for data visualization. 
  table1, #Used to add lables to variables.
  gridExtra, #Used to arrange multiple ggplots in a grid.  
  grid, #Used to arrange multiple ggplots in a grid.
  mgcv, #Used to model non-linear relationships with a general additive model. 
  gt, #Used to present a summary of the results of regression models. 
  gtsummary, #Used to create table to summarize regression models.  
  gratia, #Used together with gglopt2 to create smooth partial effects plot 
        # from gam models.
  report #Used to cite packages used in this session.
)
```

##### Session and package dependencies

```{r}
# Credits chunk of code: Alex Bossers, Utrecht University (a.bossers@uu.nl)

session <- sessionInfo()
# remove clutter
session$BLAS <- NULL
session$LAPACK <- NULL
session$loadedOnly <- NULL
# write log file
writeLines(
  capture.output(print(session, locale = FALSE)),
  paste0("sessions/",lubridate::today(), "_session_Part_8.txt")
)

session
```

```{r}
#| include: false

# Create directories for sub-folders 
figfolder <- "../results/output_figures"
tabfolder <- "../results/output_tables"
dir.create(figfolder, showWarnings = FALSE)
dir.create(tabfolder, showWarnings = FALSE)
```

```{r}
#| include: false

# Load dataset  
data <- read.csv("../data/processed/atelectasis_included.csv",
                 na.strings="NA", 
                 row.names = NULL)
# Recode variables 
source("scripts/variable_names.R")

# Recreate variables created in: 
## Part 2 (altitude category) and ## Part 4 (collapsed atelectasis percent): 
data <- data %>% 
  mutate(
    altitude_cat = cut(altitude,
                       breaks=c(0,1000,2500),
                       right=FALSE,
                       labels=c("Low altitude","Moderate altitude")
                       )
    )

data$atelectasis_percent_factor <- factor(
  data$atelectasis_percent, 
  levels=c(0,2.5,5,7.5,10,12.5,15,17.5,27.5)
  ) %>% 
  fct_collapse("17.5%" = c(17.5,27.5)) %>% 
  factor(labels = c("0%","2.5%","5%","7.5%","10%","12.5%","15%","17.5%"))

data$atelectasis_percent[data$atelectasis_percent==27.5] <- 17.5
```

# Model SpO2

The SpO2 variable does not have a normal distribution. Furthermore, the distance between 1% increases in SpO2 cannot be considered equidistant increases since values are determined from the S-shaped curve of hemoglobin saturation. This is the reason why the distribution of SpO2 is negatively skewed, with upper values reaching the saturation point of the hemoglobin curve.

Therefore, modelling SpO2 as a linear term could be potentially misleading. Nonetheless, a model assuming a gaussian distribution for SpO2 may potentially be easier to understand and communicate.

Thus, I first created model SpO2 assuming a gaussian distribution and then applied a fractional regression model which is more appropriate for the distribution of this variable. The rationale for this was that if conclusions were not different with both models, presenting a model assuming a gaussian distribution would have been easier to understand and communicate. However, since conclusions were indeed different, I will present the results for the more appropriate fractional regression model.

## Fractional regression model

Convert SpO2 to fractional values between 0 and 1 to model.

```{r}
#| echo: true
data <- data %>% mutate(spo2_fraction = spo2_VPO/100)
```

#### Empty model

First, I will fit an empty model

```{r}
model<-gam(spo2_fraction~1,
           data=data, 
           family = quasibinomial(link = logit)
           )

R2_empty <- summary(model)$r.sq
dev_empty <- summary(model)$dev.expl
```

```{r}
summary(model)
```

#### Smooth BMI

Model with a smooth BMI term as the only explanatory variable.

Since we are now using a different family function (quasibinomial with logit link) and we are no longer assuming a Gaussian distribution, it is important to determine the k value that offers the best representation of the change in the outcome variable with this function. I checked this by varying the value of k in the following code and ***k=8***\* offered the best visual representation with the largest increase in deviance explained and optimal k.value. This can be replicated by varying the value of k in the code:

```{r}
model_BMI <- gam(spo2_fraction~s(BMI,k=8), 
                 data=data, 
                 family = quasibinomial(link = logit)
                 )

R2_BMI <- summary(model_BMI)$r.sq
dev_BMI <- summary(model_BMI)$dev.expl
```

```{r}
summary(model_BMI)
```

```{r}
#| include: false 
## Change 'false' for 'true' above to show results  
k.check(model_BMI)
```

```{r}
plot(model_BMI)
```

```{r}
#| include: false 
## Change 'false' for 'true' above to show plots.    

gam.check(model_BMI)
```

#### OSA only

Fit a model that only contains OSA:

```{r}
model_OSA_only<-gam(spo2_fraction~sleep_apnea,
                    data=data,
                    family = quasibinomial(link = logit)
                    )

R2_OSA_only <- summary(model_OSA_only)$r.sq
dev_OSA_only <- summary(model_OSA_only)$dev.expl
```

```{r}
summary(model_OSA_only)
```

```{r}
#| include: false 
## Change 'false' for 'true' above to show plots.  

gam.check(model_OSA_only)
```

#### Atelectasis percent

Fit a model that only contains atelectasis percent:

```{r}
model_atel_only<-gam(spo2_fraction ~ atelectasis_percent_factor,
                     data=data, 
                     family = quasibinomial(link = logit)
                     )

R2_atel_only <- summary(model_atel_only)$r.sq
dev_atel_only <- summary(model_atel_only)$dev.expl
```

```{r}
summary(model_atel_only)
```

```{r}
#| include: false 
## Change 'false' for 'true' above to show plots.  

gam.check(model_atel_only)
```

#### Atelectasis percent smooth term

Fit a model that contains atelectasis percent under a smooth term.

Note that this is a different function than models created in Part 4 since a gaussian function is no longer used. Thus, I determined the optimal k value which is ***k=5***. This is comparable to having atelectasis percentage as categorical as will be shown later. However, the smooth term will allow to have a visual representation of the partial effect of atelectasis percent on SpO2. Thus, I will keep the smooth term to model the effect of atelectasis.

```{r}
model_atel_smooth <- gam(spo2_fraction ~ s(atelectasis_percent,k=5),
                     data=data, 
                     family = quasibinomial(link = logit)
                     )

R2_atel_smooth <- summary(model_atel_smooth)$r.sq
dev_atel_smooth <- summary(model_atel_smooth)$dev.expl
```

```{r}
plot(model_atel_smooth)
```

```{r}
summary(model_atel_smooth)
```

```{r}
#| include: false 
## Change 'false' for 'true' above to show results  
k.check(model_atel_smooth)
```

```{r}
#| include: false 
## Change 'false' for 'true' above to show plots.  
gam.check(model_atel_smooth)
```

#### s(BMI) + s(atelectasis percentage)

Fit model sBMI plus atelectasis percentage:

```{r}
model_atel<-gam(spo2_fraction ~ s(BMI,k=8) + 
                  s(atelectasis_percent,k=5),
                data=data, 
                family = quasibinomial(link = logit)
                )

R2_atel <- summary(model_atel)$r.sq
dev_atel <- summary(model_atel)$dev.expl
```

```{r}
summary(model_atel)
```

```{r}
#| include: false 
## Change 'false' for 'true' above to show plots.  
plot(model_atel, all.terms=TRUE)
```

```{r}
#| include: false 
## Change 'false' for 'true' above to show plots.  
gam.check(model_atel)
```

### OSA + BMI

Model sleep apnea plus sBMI:

```{r}
model_OSA <- gam(spo2_fraction ~ s(BMI,k=8) + sleep_apnea, 
               data=data, 
               family = quasibinomial(link = logit)
               )

R2_OSA <- summary(model_OSA)$r.sq
dev_OSA <- summary(model_OSA)$dev.expl
```

```{r}
summary(model_OSA)
```

```{r}
#| include: false 
## Change 'false' for 'true' above to show plots.  
plot(model_OSA, all.terms=TRUE)
```

### sBMI + OSA + atelectasis percent

Model sBMI + sleep apnea + atelectasis percent:

```{r}
model_OSA_atel <-gam(spo2_fraction ~ s(BMI,k=8) + sleep_apnea + 
                       s(atelectasis_percent,k=5),
                     data=data, 
                     family = quasibinomial(link = logit)
                     )

R2_OSA_atel <- summary(model_OSA_atel)$r.sq
dev_OSA_atel <- summary(model_OSA_atel)$dev.expl
```

```{r}
summary(model_OSA_atel)
```

```{r}
#| include: false 
## Change 'false' for 'true' above to show plots.  
plot(model_OSA_atel, all.terms=TRUE)
```

```{r}
#| include: false 
## Change 'false' for 'true' above to show plots.  
gam.check(model_OSA_atel)
```

### Adjusted model BMI

Fit model for BMI adjusted for confounders:

```{r}
model_adj_BMI <-gam(spo2_fraction ~ s(BMI,k=8) + sex + age + sleep_apnea +
                      hb + altitude_cat,
                    data=data,
                    na.action=na.omit,
                    family = quasibinomial(link = logit)
                    )

R2_adj_BMI <- summary(model_adj_BMI)$r.sq
dev_adj_BMI <- summary(model_adj_BMI)$dev.expl
```

```{r}
summary(model_adj_BMI)
```

```{r}
#| include: false 
## Change 'false' for 'true' above to show plots.
plot(model_adj_BMI, all.terms=TRUE)
```

```{r}
#| include: false 
## Change 'false' for 'true' above to show plots.
gam.check(model_adj_BMI)
```

### Adjusted model Atelectasis Percent

Fit model for atelectasis percent adjusted for confounders:

```{r}
model_adj_atelectasis <-gam(spo2_fraction ~ s(atelectasis_percent,k=5) +
                              sex + age + sleep_apnea + hb + altitude_cat,
                            data=data,
                            na.action=na.omit,
                            family = quasibinomial(link = logit)
                            )

R2_adj_atelectasis <- summary(model_adj_atelectasis)$r.sq
dev_adj_atelectasis <- summary(model_adj_atelectasis)$dev.expl
```

```{r}
summary(model_adj_atelectasis)
```

```{r}
#| include: false 
## Change 'false' for 'true' above to show plots.
plot(model_adj_atelectasis, all.terms=TRUE)
```

```{r}
#| include: false 
## Change 'false' for 'true' above to show plots.
gam.check(model_adj_atelectasis)
```

### Fully adjusted model

Fit fully adjusted model including both BMI and atelectasis percentage:

```{r}
model_plus<-gam(spo2_fraction ~ s(BMI, k=8) + 
                  s(atelectasis_percent,k=5) +
                  sex + age + sleep_apnea + hb + altitude_cat,
                data=data, 
                na.action=na.omit, 
                family = quasibinomial(link = logit)
                )

R2_plus <- summary(model_plus)$r.sq
dev_plus <- summary(model_plus)$dev.expl
```

```{r}
summary(model_plus)
```

```{r}
#| include: false 
## Change 'false' for 'true' above to show plots.
plot(model_plus, all.terms=TRUE)
```

```{r}
#| include: false 
## Change 'false' for 'true' above to show plots.
gam.check(model_plus)
```

Build a dataframe to compare models:

```{r}
models <- data.frame(
  Model = c("empty",
            "sBMI",
            "OSA_only",
            "atel_only",
            "atel_smooth",
            "sBMI_atel",
            "sBMI_OSA",
            "sBMI_atel_OSA",
            "adjusted_BMI",
            "adjusted_atelectasis",
            "Fully_adjusted"
            ),
  aR2 = c(R2_empty,
          R2_BMI,
          R2_OSA_only,
          R2_atel_only,
          R2_atel_smooth,
          R2_atel,
          R2_OSA,
          R2_OSA_atel,
          R2_adj_BMI,
          R2_adj_atelectasis,
          R2_plus
          ),
  dev = c(dev_empty,
          dev_BMI,
          dev_OSA_only,
          dev_atel_only,
          dev_atel_smooth,
          dev_atel,
          dev_OSA,
          dev_OSA_atel,
          dev_adj_BMI,
          dev_adj_atelectasis,
          dev_plus
          )
  )
```

Models sorted by explained deviance (from higher to lower):

```{r}
models <- models %>% mutate(aR2 = round(aR2,3)*100,
                            dev = round(dev,3)*100
                            )
models %>% arrange(desc(dev)) %>% gt()
```

```{r}
#| include: false 
## Change 'false' for 'true' above to show plots.

# Models sorted by adjusted R2    
models %>% arrange(desc(aR2))
```

Create table for models:

```{r}
tab_BMI_only <- tbl_regression(model_BMI, 
                               exponentiate = TRUE, 
                               tidy_fun = gtsummary::tidy_gam)

tab_OSA_only <- tbl_regression(model_OSA_only, 
                               exponentiate = TRUE, 
                               tidy_fun = gtsummary::tidy_gam)

tab_atel_smooth <- tbl_regression(model_atel_smooth,
                                exponentiate = TRUE,
                                tidy_fun = gtsummary::tidy_gam) 

tab_OSA <- tbl_regression(model_OSA,
                          exponentiate = TRUE, 
                          tidy_fun = gtsummary::tidy_gam) 

tab_atel <- tbl_regression(model_atel, 
                           exponentiate = TRUE,
                           tidy_fun = gtsummary::tidy_gam)

tab_OSA_atel <- tbl_regression(model_OSA_atel,
                               exponentiate = TRUE, 
                               tidy_fun = gtsummary::tidy_gam)

tab_adj_BMI <- tbl_regression(model_adj_BMI, 
                          exponentiate = TRUE,
                          tidy_fun = gtsummary::tidy_gam)

tab_adj_atelectasis <- tbl_regression(model_adj_atelectasis, 
                          exponentiate = TRUE,
                          tidy_fun = gtsummary::tidy_gam)

tab_plus <- tbl_regression(model_plus,
                           exponentiate = TRUE, 
                           tidy_fun = gtsummary::tidy_gam)

table <- tbl_stack(
  list(tab_BMI_only,tab_OSA_only,tab_atel_smooth,tab_OSA,tab_atel,tab_OSA_atel,tab_adj_BMI,tab_adj_atelectasis,tab_plus),
  group_header = c("BMI only", "OSA only", "Atelectasis percent only", "BMI + OSA", "BMI + Atelectasis percent", "BMI + OSA + Atelectasis percent", "BMI + OSA + age + sex + hb + altitude","Atelectasis percent + OSA + age + sex + hb + altitude","Fully adjusted model")
  ) 

table
```

### Figure SpO2:

#### sBMI

```{r}
#| include: false 
## Change 'false' for 'true' above to show plots.

# Check residuals:   
draw(model_BMI,residuals=TRUE) 
```

Now, take the inverse logit function to assess partial effect on mean SpO2.

```{r}
#| include: false 
## Change 'false' for 'true' above to show plots.

# Now, take the inverse logit function to assess partial effect on mean SpO2:   
draw(model_BMI, 
     constant = coef(model_BMI)[1], 
     fun = inv_link(model_BMI)
     ) 
```

Partial effect on mean SpO2:

```{r, fig.width=8, fig.height=6}
#Draw a personalized plot:  
plot3a <- draw(model_BMI, 
     constant = coef(model_BMI)[1], 
     fun = inv_link(model_BMI), 
     smooth_col = "cadetblue4"
     ) +
  scale_y_continuous(labels = scales::percent, limits=c(0.80,1)) +
  labs(x="Body mass index (kg/m²)", 
       y = "mean SpO2", 
       title = "BMI only", 
       subtitle=paste0("Deviance explained:"," ",(round(dev_BMI,3)*100),"%"),
       tag="A",
       caption=NULL) + 
  theme_bw() +
  theme(panel.border = element_blank(),
        panel.grid.minor = element_blank(), 
        axis.line = element_line(colour = "black"),
        axis.text.x = element_text(size=rel(1.2)), 
        axis.text.y = element_text(size=rel(1.2))
        )

plot3a 
```

#### sBMI_adjusted

```{r}
#| include: false 
## Change 'false' for 'true' above to show plots.

# Check residuals:   
draw(model_adj_BMI,residuals=TRUE) 
```

Partial effect on mean SpO2:

```{r, fig.width=8, fig.height=6}
plot3b <- draw(model_adj_BMI, 
     constant = coef(model_adj_BMI)[1], 
     fun = inv_link(model_adj_BMI), 
     smooth_col = "cadetblue4"
     ) +
  scale_y_continuous(labels = scales::percent, limits=c(0.80,1)) +
  labs(x="Body mass index (kg/m²)", 
       y = "mean SpO2", 
       title = "BMI adjusted*", 
       subtitle=paste0("Deviance explained:"," ",(round(dev_adj_BMI,3)*100),"%"),
       tag="B",
       caption=NULL) + 
  theme_bw() +
  theme(panel.border = element_blank(),
        panel.grid.minor = element_blank(), 
        axis.line = element_line(colour = "black"),
        axis.text.x = element_text(size=rel(1.2)), 
        axis.text.y = element_text(size=rel(1.2))
        )

plot3b 
```

#### Fully adjusted BMI

```{r}
#| include: false 
## Change 'false' for 'true' above to show plots.

# Check residuals:   
draw(model_plus,residuals=TRUE, select = "s(BMI)") 
```

Partial effect on mean SpO2:

```{r, fig.width=8, fig.height=6}
plot3c <- draw(model_plus, select = "s(BMI)", 
     constant = coef(model_plus)[1], 
     fun = inv_link(model_plus), 
     smooth_col = "cadetblue4"
     ) +
  scale_y_continuous(labels = scales::percent, limits=c(0.80,1)) +
  labs(x="Body mass index (kg/m²)", 
       y = "mean SpO2", 
       title = "Fully adjusted model", 
       subtitle=paste0("Deviance explained:"," ",(round(dev_plus,3)*100),"%"),
       tag="C",
       caption=NULL) + 
  theme_bw() +
  theme(panel.border = element_blank(),
        panel.grid.minor = element_blank(), 
        axis.line = element_line(colour = "black"),
        axis.text.x = element_text(size=rel(1.2)), 
        axis.text.y = element_text(size=rel(1.2))
        )

plot3c 
```

#### sAtelectasis percent

Check residuals:

```{r}
#| include: false 
## Change 'false' for 'true' above to show plots.

# Check residuals:   
draw(model_atel_smooth,residuals=TRUE) 
```

Draw a personalized plot:

```{r, fig.width=8, fig.height=6}
plot3d <- draw(model_atel_smooth, 
     constant = coef(model_atel_smooth)[1], 
     fun = inv_link(model_atel_smooth), 
     smooth_col = "black"
     ) +
  scale_y_continuous(labels = scales::percent, limits=c(0.80,1)) +
  labs(x="Atelectasis Percent only", 
       y = "mean SpO2", 
       title = "Atelectasis percent", 
       subtitle=paste0("Deviance explained:"," ",(round(dev_atel_smooth,3)*100),"%"),
       tag="D",
       caption=NULL) + 
  theme_bw() +
  theme(panel.border = element_blank(),
        panel.grid.minor = element_blank(), 
        axis.line = element_line(colour = "black"),
        axis.text.x = element_text(size=rel(1.2)), 
        axis.text.y = element_text(size=rel(1.2))
        )

plot3d 
```

#### Atelectasis percent adjusted

```{r}
#| include: false 
## Change 'false' for 'true' above to show plots.

# Check residuals:   
draw(model_adj_atelectasis,residuals=TRUE) 
```

Partial effect on mean SpO2:

```{r, fig.width=8, fig.height=6}
plot3e <- draw(model_adj_atelectasis, 
     constant = coef(model_adj_atelectasis)[1], 
     fun = inv_link(model_adj_atelectasis), 
     smooth_col = "black"
     ) +
  scale_y_continuous(labels = scales::percent, limits=c(0.80,1)) +
  labs(x="Atelectasis percent",
       y = "mean SpO2", 
       title = "Atelectasis percent adjusted*", 
       subtitle=paste0("Deviance explained:"," ",(round(dev_adj_atelectasis,3)*100),"%"),
       tag="E",
       caption=NULL) + 
  theme_bw() +
  theme(panel.border = element_blank(),
        panel.grid.minor = element_blank(), 
        axis.line = element_line(colour = "black"),
        axis.text.x = element_text(size=rel(1.2)), 
        axis.text.y = element_text(size=rel(1.2))
        )

plot3e 
```

#### Fully adjusted Atelectasis Percent

```{r}
#| include: false 
## Change 'false' for 'true' above to show plots.

# Check residuals:   
draw(model_plus,residuals=TRUE, select = "s(atelectasis_percent)") 
```

Partial effect on mean SpO2:

```{r, fig.width=8, fig.height=6}
plot3f <- draw(model_plus, select = "s(atelectasis_percent)", 
     constant = coef(model_plus)[1], 
     fun = inv_link(model_plus), 
     smooth_col = "black"
     ) +
  scale_y_continuous(labels = scales::percent, limits=c(0.80,1)) +
  labs(x="Atelectasis percent", 
       y = "mean SpO2", 
       title = "Fully adjusted model", 
       subtitle=paste0("Deviance explained:"," ",(round(dev_plus,3)*100),"%"),
       tag="F",
       caption=NULL) + 
  theme_bw() +
  theme(panel.border = element_blank(),
        panel.grid.minor = element_blank(), 
        axis.line = element_line(colour = "black"),
        axis.text.x = element_text(size=rel(1.2)), 
        axis.text.y = element_text(size=rel(1.2))
        )

plot3f 
```

#### Figure 3

```{r, fig.width=13, fig.height=8}
figure <- grid.arrange(plot3a, plot3b, plot3c, plot3d, plot3e, plot3f, nrow = 2)
```

# Package References

```{r}
#| include: false
report::cite_packages(session)
```

  - Auguie B (2017). _gridExtra: Miscellaneous Functions for "Grid" Graphics_. R package version 2.3, <https://CRAN.R-project.org/package=gridExtra>.
  - Grolemund G, Wickham H (2011). “Dates and Times Made Easy with lubridate.” _Journal of Statistical Software_, *40*(3), 1-25. <https://www.jstatsoft.org/v40/i03/>.
  - Iannone R, Cheng J, Schloerke B, Hughes E, Lauer A, Seo J (2023). _gt: Easily Create Presentation-Ready Display Tables_. R package version 0.10.0, <https://CRAN.R-project.org/package=gt>.
  - Makowski D, Lüdecke D, Patil I, Thériault R, Ben-Shachar M, Wiernik B (2023). “Automated Results Reporting as a Practical Tool to Improve Reproducibility and Methodological Best Practices Adoption.” _CRAN_. <https://easystats.github.io/report/>.
  - Müller K, Wickham H (2023). _tibble: Simple Data Frames_. R package version 3.2.1, <https://CRAN.R-project.org/package=tibble>.
  - Neuwirth E (2022). _RColorBrewer: ColorBrewer Palettes_. R package version 1.1-3, <https://CRAN.R-project.org/package=RColorBrewer>.
  - Pinheiro J, Bates D, R Core Team (2023). _nlme: Linear and Nonlinear Mixed Effects Models_. R package version 3.1-164, <https://CRAN.R-project.org/package=nlme>. Pinheiro JC, Bates DM (2000). _Mixed-Effects Models in S and S-PLUS_. Springer, New York. doi:10.1007/b98882 <https://doi.org/10.1007/b98882>.
  - R Core Team (2023). _R: A Language and Environment for Statistical Computing_. R Foundation for Statistical Computing, Vienna, Austria. <https://www.R-project.org/>.
  - Rich B (2023). _table1: Tables of Descriptive Statistics in HTML_. R package version 1.4.3, <https://CRAN.R-project.org/package=table1>.
  - Rinker TW, Kurkiewicz D (2018). _pacman: Package Management for R_. version 0.5.0, <http://github.com/trinker/pacman>.
  - Simpson G (2023). _gratia: Graceful ggplot-Based Graphics and Other Functions for GAMs Fitted using mgcv_. R package version 0.8.1, <https://gavinsimpson.github.io/gratia/>.
  - Sjoberg D, Whiting K, Curry M, Lavery J, Larmarange J (2021). “Reproducible Summary Tables with the gtsummary Package.” _The R Journal_, *13*, 570-580. doi:10.32614/RJ-2021-053 <https://doi.org/10.32614/RJ-2021-053>, <https://doi.org/10.32614/RJ-2021-053>.
  - Wickham H (2016). _ggplot2: Elegant Graphics for Data Analysis_. Springer-Verlag New York. ISBN 978-3-319-24277-4, <https://ggplot2.tidyverse.org>.
  - Wickham H (2023). _forcats: Tools for Working with Categorical Variables (Factors)_. R package version 1.0.0, <https://CRAN.R-project.org/package=forcats>.
  - Wickham H (2023). _stringr: Simple, Consistent Wrappers for Common String Operations_. R package version 1.5.1, <https://CRAN.R-project.org/package=stringr>.
  - Wickham H, Averick M, Bryan J, Chang W, McGowan LD, François R, Grolemund G, Hayes A, Henry L, Hester J, Kuhn M, Pedersen TL, Miller E, Bache SM, Müller K, Ooms J, Robinson D, Seidel DP, Spinu V, Takahashi K, Vaughan D, Wilke C, Woo K, Yutani H (2019). “Welcome to the tidyverse.” _Journal of Open Source Software_, *4*(43), 1686. doi:10.21105/joss.01686 <https://doi.org/10.21105/joss.01686>.
  - Wickham H, François R, Henry L, Müller K, Vaughan D (2023). _dplyr: A Grammar of Data Manipulation_. R package version 1.1.4, <https://CRAN.R-project.org/package=dplyr>.
  - Wickham H, Henry L (2023). _purrr: Functional Programming Tools_. R package version 1.0.2, <https://CRAN.R-project.org/package=purrr>.
  - Wickham H, Hester J, Bryan J (2023). _readr: Read Rectangular Text Data_. R package version 2.1.4, <https://CRAN.R-project.org/package=readr>.
  - Wickham H, Vaughan D, Girlich M (2023). _tidyr: Tidy Messy Data_. R package version 1.3.0, <https://CRAN.R-project.org/package=tidyr>.
  - Wood SN (2011). “Fast stable restricted maximum likelihood and marginal likelihood estimation of semiparametric generalized linear models.” _Journal of the Royal Statistical Society (B)_, *73*(1), 3-36. Wood S, N., Pya, S"afken B (2016). “Smoothing parameter and model selection for general smooth models (with discussion).” _Journal of the American Statistical Association_, *111*, 1548-1575. Wood SN (2004). “Stable and efficient multiple smoothing parameter estimation for generalized additive models.” _Journal of the American Statistical Association_, *99*(467), 673-686. Wood S (2017). _Generalized Additive Models: An Introduction with R_, 2 edition. Chapman and Hall/CRC. Wood SN (2003). “Thin-plate regression splines.” _Journal of the Royal Statistical Society (B)_, *65*(1), 95-114.

```{r}
#| include: false

# Run this chunk if you wish to clear your environment and unload packages.

pacman::p_unload(negate = TRUE)

rm(data, figfolder, tabfolder, dataOSA, figure, table, session)

rm(list=setdiff(ls(pattern = "^plot3"), lsf.str()))
rm(list=setdiff(ls(pattern = "^dev"), lsf.str()))
rm(list=setdiff(ls(pattern = "^model"), lsf.str()))
rm(list=setdiff(ls(pattern = "^R2"), lsf.str()))
rm(list=setdiff(ls(pattern = "^tab_"), lsf.str()))
```
